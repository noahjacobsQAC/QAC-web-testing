# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ui_viewer.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import json
import logging
from logging import error
from typing import Dict, Optional

from PyQt5.QtCore import Qt, QThread
from PyQt5.QtGui import QPixmap
from PyQt5.QtWidgets import QTableWidget, QTableWidgetItem, QWidget, QMainWindow, QLabel
from src.gui.testwidget.ui_test import Ui_Dialog as Ui_TestWidget
from src.gui.viewwidget.scrapSelection import ScrapSelection, Ui_ScrapSelection
from src.logger import logger
from src.database.wacdatabase import WACDatabase

from PyQt5.QtCore import pyqtSignal

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt

#import base64


#### TEST IMPORTS ####
from src.tests.wcagScan import wcagScan as test_scan
from src.tests.siteMap import siteMap as test_map
#from src.tests.wcag11 import wcag11 as test_wcag11
#from src.tests.wcag12 import wcag12 as test_wcag12
#from src.tests.wcag13 import wcag13 as test_wcag13
from src.tests.bmoTests import BMOTests as test_bmo


class TestWidget(QWidget):
    def __init__(self):
        super().__init__()
        self.ui = Ui_TestWidget()
        self.ui.setupUi(self)

        #https://www.bmo.com/main/personal/bank-accounts/chequing-accounts/
        self.ui.le_url.setText("https://qaconsultants.com/")
        self.ui.le_url.setText("https://www.bmo.com/main/personal")
        self.ui.le_filename.setText("bmo")

        self.ui.btn_runTest.clicked.connect(self.runTest)
        self.ui.btn_openElem.clicked.connect(self.openElem)
        self.ui.btn_scan.clicked.connect(self.runScan)
        self.ui.btn_map.clicked.connect(self.checkTabs)
        self.ui.btn_export.clicked.connect(self.outputSite)
        self.ui.btn_runAll.clicked.connect(self.runAll)
       
    def checkTabs(self):
        filename = self.ui.le_filename.text()
        url = self.ui.le_url.text()
        headers = self.ui.ck_skipHeader.isChecked()
        self.scan = test_scan(url, filename, "Chrome", headers, "",  {'headless':False})
        self.scan.scanSignal.connect(self.updateScanID)
        self.scan.signalConsole.connect(self.updateConsole)
        self.scan.checkTabbing()

        
    def runAll(self):
        self.runMapping()
        self.map.signalFinished.connect(self.run2)
        
    
    def run2(self):
        self.runScan()
        self.scan.signalFinished.connect(self.runTest)

    def run3(self):
        self.runTest()
        self.test.signalFinished.connect(self.outputSite)
    def runTest(self):
        filename = self.ui.le_filename.text()
        url = self.ui.le_url.text()
        '''if self.ui.rd_wcag12.isChecked():
            self.test = test_wcag12(url, "Chrome", "",  {'headless':True})
            self.test.test(filename)
        elif self.ui.rd_wcag11.isChecked():
            self.test = test_wcag11(url, "Chrome", "",  {'headless':True})
            self.test.testing(filename, url)
        elif self.ui.rd_wcag13.isChecked():
            self.test = test_wcag13(url, "Chrome", "",  {'headless':True})
            self.test.run(filename, url)'''

        self.thread = QThread()

        self.test = test_bmo(url, filename)
        #self.test.moveToThread(self.thread)
        self.test.signalConsole.connect(self.updateConsole)
        self.test.start()
        return True
        

    def runScan(self):
        print("run scan")
        url = self.ui.le_url.text()
        filename = self.ui.le_filename.text()
        headers = self.ui.ck_skipHeader.isChecked()
        
        self.scan = test_scan(url, filename, "Chrome", headers, "",  {'headless':True})
        self.scan.scanSignal.connect(self.updateScanID)
        self.scan.signalConsole.connect(self.updateConsole)
        self.scan.start()
        return True

    def runMapping(self):
        
        url = self.ui.le_url.text()
        filename = self.ui.le_filename.text()
        self.map = test_map(url, filename, "Chrome", "",  {'headless':True}) 
        self.map.signalConsole.connect(self.updateConsole)
        
        self.map.start() 
        return True

    def outputSite(self):
        url = self.ui.le_url.text()
        filename = self.ui.le_filename.text()
        self.scan = test_scan(url, filename, "Chrome", "",  {'headless':False})
        self.scan.output(scanID=filename)
    
    def openElem(self):
        
        url = self.ui.le_url.text()
        filename = self.ui.le_filename.text()
        self.scan = test_scan(url, filename, "Chrome", "",  {'headless':False})
        url = self.ui.le_url.text()
        try:
            webid = self.ui.le_elemID.text()
        except:
            webid = 1
        self.scan.openElem(webid)
        
            
        
    def updateScanID(self, msg):
        self.ui.le_scanID.setText(msg)


    def updateConsole(self, msg):
        #print(msg)
        self.ui.console.append(msg)

    def writeTofile(self, data, filename):
    # Convert binary data to proper format and write it on Hard Disk
      with open(filename, 'wb') as file:
          file.write(data)
      
   

class TableModel(QtCore.QAbstractTableModel):

    def __init__(self, data):
        super(TableModel, self).__init__()
        self._data = data

    def data(self, index, role):
        if role == Qt.DisplayRole:
            # See below for the nested-list data structure.
            # .row() indexes into the outer list,
            # .column() indexes into the sub-list
            return self._data[index.row()][index.column()]

